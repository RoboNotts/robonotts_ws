// Generated by gencpp from file metrics_refbox_msgs/ClutteredPickResult.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_CLUTTEREDPICKRESULT_H
#define METRICS_REFBOX_MSGS_MESSAGE_CLUTTEREDPICKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct ClutteredPickResult_
{
  typedef ClutteredPickResult_<ContainerAllocator> Type;

  ClutteredPickResult_()
    : message_type(0)
    , object_name()
    , action_completed(0)
    , num_objects_picked(0)  {
    }
  ClutteredPickResult_(const ContainerAllocator& _alloc)
    : message_type(0)
    , object_name(_alloc)
    , action_completed(0)
    , num_objects_picked(0)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef uint8_t _action_completed_type;
  _action_completed_type action_completed;

   typedef uint8_t _num_objects_picked_type;
  _num_objects_picked_type num_objects_picked;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FEEDBACK)
  #undef FEEDBACK
#endif
#if defined(_WIN32) && defined(RESULT)
  #undef RESULT
#endif
#if defined(_WIN32) && defined(PICKED)
  #undef PICKED
#endif
#if defined(_WIN32) && defined(PLACED)
  #undef PLACED
#endif

  enum {
    FEEDBACK = 1u,
    RESULT = 2u,
    PICKED = 1u,
    PLACED = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> const> ConstPtr;

}; // struct ClutteredPickResult_

typedef ::metrics_refbox_msgs::ClutteredPickResult_<std::allocator<void> > ClutteredPickResult;

typedef boost::shared_ptr< ::metrics_refbox_msgs::ClutteredPickResult > ClutteredPickResultPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::ClutteredPickResult const> ClutteredPickResultConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.object_name == rhs.object_name &&
    lhs.action_completed == rhs.action_completed &&
    lhs.num_objects_picked == rhs.num_objects_picked;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87f9e733679ff877ef0bd36192d0de48";
  }

  static const char* value(const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87f9e733679ff877ULL;
  static const uint64_t static_value2 = 0xef0bd36192d0de48ULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/ClutteredPickResult";
  }

  static const char* value(const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FEEDBACK=1\n"
"uint8 RESULT=2\n"
"uint8 message_type\n"
"\n"
"# feedback\n"
"uint8 PICKED=1\n"
"uint8 PLACED=2\n"
"\n"
"string object_name\n"
"uint8 action_completed\n"
"\n"
"\n"
"# result\n"
"uint8 num_objects_picked\n"
"\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.object_name);
      stream.next(m.action_completed);
      stream.next(m.num_objects_picked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClutteredPickResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::ClutteredPickResult_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "action_completed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_completed);
    s << indent << "num_objects_picked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_objects_picked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_CLUTTEREDPICKRESULT_H
