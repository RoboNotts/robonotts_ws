// Generated by gencpp from file metrics_refbox_msgs/HandoverObjectResult.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_HANDOVEROBJECTRESULT_H
#define METRICS_REFBOX_MSGS_MESSAGE_HANDOVEROBJECTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct HandoverObjectResult_
{
  typedef HandoverObjectResult_<ContainerAllocator> Type;

  HandoverObjectResult_()
    : message_type(0)
    , human_pose(0)
    , human_reach_out_result(0)
    , grasp_result(0)
    , post_grasp_result(0)  {
    }
  HandoverObjectResult_(const ContainerAllocator& _alloc)
    : message_type(0)
    , human_pose(0)
    , human_reach_out_result(0)
    , grasp_result(0)
    , post_grasp_result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _human_pose_type;
  _human_pose_type human_pose;

   typedef uint8_t _human_reach_out_result_type;
  _human_reach_out_result_type human_reach_out_result;

   typedef uint8_t _grasp_result_type;
  _grasp_result_type grasp_result;

   typedef uint8_t _post_grasp_result_type;
  _post_grasp_result_type post_grasp_result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FEEDBACK)
  #undef FEEDBACK
#endif
#if defined(_WIN32) && defined(RESULT)
  #undef RESULT
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_LAYING)
  #undef HUMAN_POSE_LAYING
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_STANDING)
  #undef HUMAN_POSE_STANDING
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_SITTING)
  #undef HUMAN_POSE_SITTING
#endif
#if defined(_WIN32) && defined(HUMAN_REACHED_OUT)
  #undef HUMAN_REACHED_OUT
#endif
#if defined(_WIN32) && defined(HUMAN_DID_NOT_REACH_OUT)
  #undef HUMAN_DID_NOT_REACH_OUT
#endif
#if defined(_WIN32) && defined(GRASP_SUCCESSFUL)
  #undef GRASP_SUCCESSFUL
#endif
#if defined(_WIN32) && defined(GRASP_UNSUCCESSFUL)
  #undef GRASP_UNSUCCESSFUL
#endif
#if defined(_WIN32) && defined(OBJECT_DROPPED_AFTER_GRASP)
  #undef OBJECT_DROPPED_AFTER_GRASP
#endif
#if defined(_WIN32) && defined(OBJECT_NOT_DROPPED_AFTER_GRASP)
  #undef OBJECT_NOT_DROPPED_AFTER_GRASP
#endif

  enum {
    FEEDBACK = 1u,
    RESULT = 2u,
    HUMAN_POSE_LAYING = 1u,
    HUMAN_POSE_STANDING = 2u,
    HUMAN_POSE_SITTING = 3u,
    HUMAN_REACHED_OUT = 1u,
    HUMAN_DID_NOT_REACH_OUT = 2u,
    GRASP_SUCCESSFUL = 1u,
    GRASP_UNSUCCESSFUL = 2u,
    OBJECT_DROPPED_AFTER_GRASP = 1u,
    OBJECT_NOT_DROPPED_AFTER_GRASP = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> const> ConstPtr;

}; // struct HandoverObjectResult_

typedef ::metrics_refbox_msgs::HandoverObjectResult_<std::allocator<void> > HandoverObjectResult;

typedef boost::shared_ptr< ::metrics_refbox_msgs::HandoverObjectResult > HandoverObjectResultPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::HandoverObjectResult const> HandoverObjectResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.human_pose == rhs.human_pose &&
    lhs.human_reach_out_result == rhs.human_reach_out_result &&
    lhs.grasp_result == rhs.grasp_result &&
    lhs.post_grasp_result == rhs.post_grasp_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d548e8447af165afb4ca080bc119755";
  }

  static const char* value(const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d548e8447af165aULL;
  static const uint64_t static_value2 = 0xfb4ca080bc119755ULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/HandoverObjectResult";
  }

  static const char* value(const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FEEDBACK=1\n"
"uint8 RESULT=2\n"
"uint8 message_type\n"
"\n"
"# enums for human_pose\n"
"uint8 HUMAN_POSE_LAYING=1\n"
"uint8 HUMAN_POSE_STANDING=2\n"
"uint8 HUMAN_POSE_SITTING=3\n"
"\n"
"\n"
"uint8 human_pose\n"
"\n"
"# enums for human_reach_out_result\n"
"uint8 HUMAN_REACHED_OUT=1\n"
"uint8 HUMAN_DID_NOT_REACH_OUT=2\n"
"\n"
"uint8 human_reach_out_result\n"
"\n"
"# enums for grasp result\n"
"uint8 GRASP_SUCCESSFUL=1\n"
"uint8 GRASP_UNSUCCESSFUL=2\n"
"\n"
"uint8 grasp_result\n"
"\n"
"\n"
"# enums for post_grasp_result\n"
"uint8 OBJECT_DROPPED_AFTER_GRASP=1\n"
"uint8 OBJECT_NOT_DROPPED_AFTER_GRASP=2\n"
"\n"
"uint8 post_grasp_result\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.human_pose);
      stream.next(m.human_reach_out_result);
      stream.next(m.grasp_result);
      stream.next(m.post_grasp_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandoverObjectResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::HandoverObjectResult_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "human_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.human_pose);
    s << indent << "human_reach_out_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.human_reach_out_result);
    s << indent << "grasp_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasp_result);
    s << indent << "post_grasp_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.post_grasp_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_HANDOVEROBJECTRESULT_H
