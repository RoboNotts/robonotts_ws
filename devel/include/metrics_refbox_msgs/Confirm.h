// Generated by gencpp from file metrics_refbox_msgs/Confirm.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_CONFIRM_H
#define METRICS_REFBOX_MSGS_MESSAGE_CONFIRM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct Confirm_
{
  typedef Confirm_<ContainerAllocator> Type;

  Confirm_()
    : uid()
    , data(false)
    , rosbag_filename()  {
    }
  Confirm_(const ContainerAllocator& _alloc)
    : uid(_alloc)
    , data(false)
    , rosbag_filename(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uid_type;
  _uid_type uid;

   typedef uint8_t _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rosbag_filename_type;
  _rosbag_filename_type rosbag_filename;





  typedef boost::shared_ptr< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> const> ConstPtr;

}; // struct Confirm_

typedef ::metrics_refbox_msgs::Confirm_<std::allocator<void> > Confirm;

typedef boost::shared_ptr< ::metrics_refbox_msgs::Confirm > ConfirmPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::Confirm const> ConfirmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::Confirm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::Confirm_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::Confirm_<ContainerAllocator2> & rhs)
{
  return lhs.uid == rhs.uid &&
    lhs.data == rhs.data &&
    lhs.rosbag_filename == rhs.rosbag_filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::Confirm_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::Confirm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "417835597ece8052d8963da89d333ccd";
  }

  static const char* value(const ::metrics_refbox_msgs::Confirm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x417835597ece8052ULL;
  static const uint64_t static_value2 = 0xd8963da89d333ccdULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/Confirm";
  }

  static const char* value(const ::metrics_refbox_msgs::Confirm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string uid\n"
"bool data\n"
"string rosbag_filename\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::Confirm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uid);
      stream.next(m.data);
      stream.next(m.rosbag_filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Confirm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::Confirm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::Confirm_<ContainerAllocator>& v)
  {
    s << indent << "uid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uid);
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
    s << indent << "rosbag_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rosbag_filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_CONFIRM_H
