// Generated by gencpp from file metrics_refbox_msgs/HumanRecognitionResult.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_HUMANRECOGNITIONRESULT_H
#define METRICS_REFBOX_MSGS_MESSAGE_HUMANRECOGNITIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct HumanRecognitionResult_
{
  typedef HumanRecognitionResult_<ContainerAllocator> Type;

  HumanRecognitionResult_()
    : message_type(0)
    , identities()  {
    }
  HumanRecognitionResult_(const ContainerAllocator& _alloc)
    : message_type(0)
    , identities(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _identities_type;
  _identities_type identities;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FEEDBACK)
  #undef FEEDBACK
#endif
#if defined(_WIN32) && defined(RESULT)
  #undef RESULT
#endif

  enum {
    FEEDBACK = 1u,
    RESULT = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> const> ConstPtr;

}; // struct HumanRecognitionResult_

typedef ::metrics_refbox_msgs::HumanRecognitionResult_<std::allocator<void> > HumanRecognitionResult;

typedef boost::shared_ptr< ::metrics_refbox_msgs::HumanRecognitionResult > HumanRecognitionResultPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::HumanRecognitionResult const> HumanRecognitionResultConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.identities == rhs.identities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7de96a6e70a0c5d5e50d4f423425618";
  }

  static const char* value(const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7de96a6e70a0c5dULL;
  static const uint64_t static_value2 = 0x5e50d4f423425618ULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/HumanRecognitionResult";
  }

  static const char* value(const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FEEDBACK=1\n"
"uint8 RESULT=2\n"
"uint8 message_type\n"
"\n"
"# list of recognized persons from most probable to least probable\n"
"string[] identities\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.identities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanRecognitionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::HumanRecognitionResult_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "identities[]" << std::endl;
    for (size_t i = 0; i < v.identities.size(); ++i)
    {
      s << indent << "  identities[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.identities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_HUMANRECOGNITIONRESULT_H
