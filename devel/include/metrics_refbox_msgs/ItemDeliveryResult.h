// Generated by gencpp from file metrics_refbox_msgs/ItemDeliveryResult.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_ITEMDELIVERYRESULT_H
#define METRICS_REFBOX_MSGS_MESSAGE_ITEMDELIVERYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <metrics_refbox_msgs/BoundingBox2D.h>

namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct ItemDeliveryResult_
{
  typedef ItemDeliveryResult_<ContainerAllocator> Type;

  ItemDeliveryResult_()
    : message_type(0)
    , phase(0)
    , image()
    , box2d()
    , human_pose(0)
    , human_reach_out_result(0)
    , grasp_result(0)
    , post_grasp_result(0)
    , result(0)  {
    }
  ItemDeliveryResult_(const ContainerAllocator& _alloc)
    : message_type(0)
    , phase(0)
    , image(_alloc)
    , box2d(_alloc)
    , human_pose(0)
    , human_reach_out_result(0)
    , grasp_result(0)
    , post_grasp_result(0)
    , result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _phase_type;
  _phase_type phase;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef  ::metrics_refbox_msgs::BoundingBox2D_<ContainerAllocator>  _box2d_type;
  _box2d_type box2d;

   typedef uint8_t _human_pose_type;
  _human_pose_type human_pose;

   typedef uint8_t _human_reach_out_result_type;
  _human_reach_out_result_type human_reach_out_result;

   typedef uint8_t _grasp_result_type;
  _grasp_result_type grasp_result;

   typedef uint8_t _post_grasp_result_type;
  _post_grasp_result_type post_grasp_result;

   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FEEDBACK)
  #undef FEEDBACK
#endif
#if defined(_WIN32) && defined(RESULT)
  #undef RESULT
#endif
#if defined(_WIN32) && defined(PHASE_NAV_TO_OBJECT)
  #undef PHASE_NAV_TO_OBJECT
#endif
#if defined(_WIN32) && defined(PHASE_OBJECT_DETECTION)
  #undef PHASE_OBJECT_DETECTION
#endif
#if defined(_WIN32) && defined(PHASE_OBJECT_PICK)
  #undef PHASE_OBJECT_PICK
#endif
#if defined(_WIN32) && defined(PHASE_NAV_TO_PERSON)
  #undef PHASE_NAV_TO_PERSON
#endif
#if defined(_WIN32) && defined(PHASE_PERSON_DETECTION)
  #undef PHASE_PERSON_DETECTION
#endif
#if defined(_WIN32) && defined(PHASE_HANDOVER)
  #undef PHASE_HANDOVER
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_LAYING)
  #undef HUMAN_POSE_LAYING
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_STANDING)
  #undef HUMAN_POSE_STANDING
#endif
#if defined(_WIN32) && defined(HUMAN_POSE_SITTING)
  #undef HUMAN_POSE_SITTING
#endif
#if defined(_WIN32) && defined(HUMAN_REACHED_OUT)
  #undef HUMAN_REACHED_OUT
#endif
#if defined(_WIN32) && defined(HUMAN_DID_NOT_REACH_OUT)
  #undef HUMAN_DID_NOT_REACH_OUT
#endif
#if defined(_WIN32) && defined(GRASP_SUCCESSFUL)
  #undef GRASP_SUCCESSFUL
#endif
#if defined(_WIN32) && defined(GRASP_UNSUCCESSFUL)
  #undef GRASP_UNSUCCESSFUL
#endif
#if defined(_WIN32) && defined(OBJECT_DROPPED_AFTER_GRASP)
  #undef OBJECT_DROPPED_AFTER_GRASP
#endif
#if defined(_WIN32) && defined(OBJECT_NOT_DROPPED_AFTER_GRASP)
  #undef OBJECT_NOT_DROPPED_AFTER_GRASP
#endif
#if defined(_WIN32) && defined(RESULT_SUCCESS)
  #undef RESULT_SUCCESS
#endif
#if defined(_WIN32) && defined(RESULT_FAILURE)
  #undef RESULT_FAILURE
#endif

  enum {
    FEEDBACK = 1u,
    RESULT = 2u,
    PHASE_NAV_TO_OBJECT = 1u,
    PHASE_OBJECT_DETECTION = 2u,
    PHASE_OBJECT_PICK = 3u,
    PHASE_NAV_TO_PERSON = 4u,
    PHASE_PERSON_DETECTION = 5u,
    PHASE_HANDOVER = 6u,
    HUMAN_POSE_LAYING = 1u,
    HUMAN_POSE_STANDING = 2u,
    HUMAN_POSE_SITTING = 3u,
    HUMAN_REACHED_OUT = 1u,
    HUMAN_DID_NOT_REACH_OUT = 2u,
    GRASP_SUCCESSFUL = 1u,
    GRASP_UNSUCCESSFUL = 2u,
    OBJECT_DROPPED_AFTER_GRASP = 1u,
    OBJECT_NOT_DROPPED_AFTER_GRASP = 2u,
    RESULT_SUCCESS = 1u,
    RESULT_FAILURE = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> const> ConstPtr;

}; // struct ItemDeliveryResult_

typedef ::metrics_refbox_msgs::ItemDeliveryResult_<std::allocator<void> > ItemDeliveryResult;

typedef boost::shared_ptr< ::metrics_refbox_msgs::ItemDeliveryResult > ItemDeliveryResultPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::ItemDeliveryResult const> ItemDeliveryResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.phase == rhs.phase &&
    lhs.image == rhs.image &&
    lhs.box2d == rhs.box2d &&
    lhs.human_pose == rhs.human_pose &&
    lhs.human_reach_out_result == rhs.human_reach_out_result &&
    lhs.grasp_result == rhs.grasp_result &&
    lhs.post_grasp_result == rhs.post_grasp_result &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f5b116dba66c515bfcf0a99c9bb4b7b";
  }

  static const char* value(const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f5b116dba66c515ULL;
  static const uint64_t static_value2 = 0xbfcf0a99c9bb4b7bULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/ItemDeliveryResult";
  }

  static const char* value(const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FEEDBACK=1\n"
"uint8 RESULT=2\n"
"uint8 message_type\n"
"\n"
"# feedback when each phase is complete\n"
"uint8 PHASE_NAV_TO_OBJECT=1\n"
"uint8 PHASE_OBJECT_DETECTION=2\n"
"uint8 PHASE_OBJECT_PICK=3\n"
"uint8 PHASE_NAV_TO_PERSON=4\n"
"uint8 PHASE_PERSON_DETECTION=5\n"
"uint8 PHASE_HANDOVER=6\n"
"\n"
"uint8 phase\n"
"\n"
"\n"
"# for phase_object_detection and phase_person_detection\n"
"sensor_msgs/Image image\n"
"BoundingBox2D box2d\n"
"\n"
"\n"
"# for phase_handover\n"
"\n"
"# enums for human_pose\n"
"uint8 HUMAN_POSE_LAYING=1\n"
"uint8 HUMAN_POSE_STANDING=2\n"
"uint8 HUMAN_POSE_SITTING=3\n"
"\n"
"uint8 human_pose\n"
"\n"
"# enums for human_reach_out_result\n"
"uint8 HUMAN_REACHED_OUT=1\n"
"uint8 HUMAN_DID_NOT_REACH_OUT=2\n"
"\n"
"uint8 human_reach_out_result\n"
"\n"
"# enums for grasp result\n"
"uint8 GRASP_SUCCESSFUL=1\n"
"uint8 GRASP_UNSUCCESSFUL=2\n"
"\n"
"uint8 grasp_result\n"
"\n"
"\n"
"# enums for post_grasp_result\n"
"uint8 OBJECT_DROPPED_AFTER_GRASP=1\n"
"uint8 OBJECT_NOT_DROPPED_AFTER_GRASP=2\n"
"\n"
"uint8 post_grasp_result\n"
"\n"
"\n"
"## Result\n"
"uint8 RESULT_SUCCESS=1\n"
"uint8 RESULT_FAILURE=2\n"
"uint8 result\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: metrics_refbox_msgs/BoundingBox2D\n"
"uint32 min_x\n"
"uint32 min_y\n"
"uint32 max_x\n"
"uint32 max_y\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.phase);
      stream.next(m.image);
      stream.next(m.box2d);
      stream.next(m.human_pose);
      stream.next(m.human_reach_out_result);
      stream.next(m.grasp_result);
      stream.next(m.post_grasp_result);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ItemDeliveryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::ItemDeliveryResult_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.phase);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "box2d: ";
    s << std::endl;
    Printer< ::metrics_refbox_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.box2d);
    s << indent << "human_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.human_pose);
    s << indent << "human_reach_out_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.human_reach_out_result);
    s << indent << "grasp_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasp_result);
    s << indent << "post_grasp_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.post_grasp_result);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_ITEMDELIVERYRESULT_H
