// Generated by gencpp from file metrics_refbox_msgs/Command.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_COMMAND_H
#define METRICS_REFBOX_MSGS_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : task(0)
    , command(0)
    , task_config()
    , uid()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : task(0)
    , command(0)
    , task_config(_alloc)
    , uid(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _task_type;
  _task_type task;

   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_config_type;
  _task_config_type task_config;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uid_type;
  _uid_type uid;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OBJECT_DETECTION)
  #undef OBJECT_DETECTION
#endif
#if defined(_WIN32) && defined(PERSON_DETECTION)
  #undef PERSON_DETECTION
#endif
#if defined(_WIN32) && defined(ACTIVITY_RECOGNITION)
  #undef ACTIVITY_RECOGNITION
#endif
#if defined(_WIN32) && defined(GESTURE_RECOGNITION)
  #undef GESTURE_RECOGNITION
#endif
#if defined(_WIN32) && defined(TASK_ORIENTED_GRASPING)
  #undef TASK_ORIENTED_GRASPING
#endif
#if defined(_WIN32) && defined(HANDOVER_OBJECT)
  #undef HANDOVER_OBJECT
#endif
#if defined(_WIN32) && defined(RECEIVE_OBJECT)
  #undef RECEIVE_OBJECT
#endif
#if defined(_WIN32) && defined(ASSESS_ACTIVITY_STATE)
  #undef ASSESS_ACTIVITY_STATE
#endif
#if defined(_WIN32) && defined(ITEM_DELIVERY)
  #undef ITEM_DELIVERY
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif

  enum {
    OBJECT_DETECTION = 1u,
    PERSON_DETECTION = 2u,
    ACTIVITY_RECOGNITION = 3u,
    GESTURE_RECOGNITION = 4u,
    TASK_ORIENTED_GRASPING = 5u,
    HANDOVER_OBJECT = 6u,
    RECEIVE_OBJECT = 7u,
    ASSESS_ACTIVITY_STATE = 8u,
    ITEM_DELIVERY = 9u,
    START = 1u,
    STOP = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::metrics_refbox_msgs::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::metrics_refbox_msgs::Command > CommandPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::Command const> CommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::Command_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::Command_<ContainerAllocator2> & rhs)
{
  return lhs.task == rhs.task &&
    lhs.command == rhs.command &&
    lhs.task_config == rhs.task_config &&
    lhs.uid == rhs.uid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::Command_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f0442d04a8cefd06266d146bdcdb55f";
  }

  static const char* value(const ::metrics_refbox_msgs::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f0442d04a8cefd0ULL;
  static const uint64_t static_value2 = 0x6266d146bdcdb55fULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/Command";
  }

  static const char* value(const ::metrics_refbox_msgs::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# task ENUMS\n"
"uint8 OBJECT_DETECTION=1\n"
"uint8 PERSON_DETECTION=2\n"
"uint8 ACTIVITY_RECOGNITION=3\n"
"uint8 GESTURE_RECOGNITION=4\n"
"uint8 TASK_ORIENTED_GRASPING=5\n"
"uint8 HANDOVER_OBJECT=6\n"
"uint8 RECEIVE_OBJECT=7\n"
"uint8 ASSESS_ACTIVITY_STATE=8\n"
"uint8 ITEM_DELIVERY=9\n"
"\n"
"\n"
"# command ENUMS\n"
"uint8 START=1\n"
"uint8 STOP=2\n"
"\n"
"\n"
"uint8 task\n"
"uint8 command\n"
"\n"
"# json string with additional info for specific benchmarks\n"
"string task_config\n"
"\n"
"# unique identifier for this message\n"
"string uid\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.command);
      stream.next(m.task_config);
      stream.next(m.uid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::Command_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "task_config: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_config);
    s << indent << "uid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_COMMAND_H
