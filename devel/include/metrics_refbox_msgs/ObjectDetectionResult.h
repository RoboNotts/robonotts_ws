// Generated by gencpp from file metrics_refbox_msgs/ObjectDetectionResult.msg
// DO NOT EDIT!


#ifndef METRICS_REFBOX_MSGS_MESSAGE_OBJECTDETECTIONRESULT_H
#define METRICS_REFBOX_MSGS_MESSAGE_OBJECTDETECTIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <metrics_refbox_msgs/BoundingBox2D.h>
#include <metrics_refbox_msgs/BoundingBox3D.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/PointCloud2.h>

namespace metrics_refbox_msgs
{
template <class ContainerAllocator>
struct ObjectDetectionResult_
{
  typedef ObjectDetectionResult_<ContainerAllocator> Type;

  ObjectDetectionResult_()
    : message_type(0)
    , result_type(0)
    , object_found(false)
    , box2d()
    , box3d()
    , image()
    , pointcloud()  {
    }
  ObjectDetectionResult_(const ContainerAllocator& _alloc)
    : message_type(0)
    , result_type(0)
    , object_found(false)
    , box2d(_alloc)
    , box3d(_alloc)
    , image(_alloc)
    , pointcloud(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint8_t _result_type_type;
  _result_type_type result_type;

   typedef uint8_t _object_found_type;
  _object_found_type object_found;

   typedef  ::metrics_refbox_msgs::BoundingBox2D_<ContainerAllocator>  _box2d_type;
  _box2d_type box2d;

   typedef  ::metrics_refbox_msgs::BoundingBox3D_<ContainerAllocator>  _box3d_type;
  _box3d_type box3d;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pointcloud_type;
  _pointcloud_type pointcloud;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FEEDBACK)
  #undef FEEDBACK
#endif
#if defined(_WIN32) && defined(RESULT)
  #undef RESULT
#endif
#if defined(_WIN32) && defined(BOUNDING_BOX_2D)
  #undef BOUNDING_BOX_2D
#endif
#if defined(_WIN32) && defined(BOUNDING_BOX_3D)
  #undef BOUNDING_BOX_3D
#endif

  enum {
    FEEDBACK = 1u,
    RESULT = 2u,
    BOUNDING_BOX_2D = 1u,
    BOUNDING_BOX_3D = 2u,
  };


  typedef boost::shared_ptr< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetectionResult_

typedef ::metrics_refbox_msgs::ObjectDetectionResult_<std::allocator<void> > ObjectDetectionResult;

typedef boost::shared_ptr< ::metrics_refbox_msgs::ObjectDetectionResult > ObjectDetectionResultPtr;
typedef boost::shared_ptr< ::metrics_refbox_msgs::ObjectDetectionResult const> ObjectDetectionResultConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.result_type == rhs.result_type &&
    lhs.object_found == rhs.object_found &&
    lhs.box2d == rhs.box2d &&
    lhs.box3d == rhs.box3d &&
    lhs.image == rhs.image &&
    lhs.pointcloud == rhs.pointcloud;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator1> & lhs, const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace metrics_refbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9b748919c575e5d4c866ee9421fa93f";
  }

  static const char* value(const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9b748919c575e5dULL;
  static const uint64_t static_value2 = 0x4c866ee9421fa93fULL;
};

template<class ContainerAllocator>
struct DataType< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metrics_refbox_msgs/ObjectDetectionResult";
  }

  static const char* value(const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FEEDBACK=1\n"
"uint8 RESULT=2\n"
"uint8 message_type\n"
"\n"
"uint8 BOUNDING_BOX_2D=1\n"
"uint8 BOUNDING_BOX_3D=2\n"
"\n"
"# set to either BOUNDING_BOX_2D or BOUNDING_BOX_3D\n"
"uint8 result_type\n"
"\n"
"# set to true if target object has been found\n"
"bool object_found\n"
"\n"
"# if result_type is BOUNDING_BOX_2D, box2d needs to be filled\n"
"BoundingBox2D box2d\n"
"\n"
"# if result_type is BOUNDING_BOX_3D, box2d needs to be filled\n"
"BoundingBox3D box3d\n"
"\n"
"# if result_type is BOUNDING_BOX_2D, image needs to be provided\n"
"sensor_msgs/Image image\n"
"# if result_type is BOUNDING_BOX_3D, pointcloud needs to be provided\n"
"sensor_msgs/PointCloud2 pointcloud\n"
"\n"
"================================================================================\n"
"MSG: metrics_refbox_msgs/BoundingBox2D\n"
"uint32 min_x\n"
"uint32 min_y\n"
"uint32 max_x\n"
"uint32 max_y\n"
"\n"
"================================================================================\n"
"MSG: metrics_refbox_msgs/BoundingBox3D\n"
"# Geometrical center\n"
"geometry_msgs/Point center\n"
"# Dimensions\n"
"geometry_msgs/Vector3 dimensions\n"
"# List of vertices; first bottom, then top, in clockwise direction\n"
"geometry_msgs/Point[] vertices\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.result_type);
      stream.next(m.object_found);
      stream.next(m.box2d);
      stream.next(m.box3d);
      stream.next(m.image);
      stream.next(m.pointcloud);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetectionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metrics_refbox_msgs::ObjectDetectionResult_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "result_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result_type);
    s << indent << "object_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_found);
    s << indent << "box2d: ";
    s << std::endl;
    Printer< ::metrics_refbox_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.box2d);
    s << indent << "box3d: ";
    s << std::endl;
    Printer< ::metrics_refbox_msgs::BoundingBox3D_<ContainerAllocator> >::stream(s, indent + "  ", v.box3d);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "pointcloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.pointcloud);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRICS_REFBOX_MSGS_MESSAGE_OBJECTDETECTIONRESULT_H
