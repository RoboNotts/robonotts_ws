# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from metrics_refbox_msgs/ItemDeliveryResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import metrics_refbox_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class ItemDeliveryResult(genpy.Message):
  _md5sum = "1f5b116dba66c515bfcf0a99c9bb4b7b"
  _type = "metrics_refbox_msgs/ItemDeliveryResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 FEEDBACK=1
uint8 RESULT=2
uint8 message_type

# feedback when each phase is complete
uint8 PHASE_NAV_TO_OBJECT=1
uint8 PHASE_OBJECT_DETECTION=2
uint8 PHASE_OBJECT_PICK=3
uint8 PHASE_NAV_TO_PERSON=4
uint8 PHASE_PERSON_DETECTION=5
uint8 PHASE_HANDOVER=6

uint8 phase


# for phase_object_detection and phase_person_detection
sensor_msgs/Image image
BoundingBox2D box2d


# for phase_handover

# enums for human_pose
uint8 HUMAN_POSE_LAYING=1
uint8 HUMAN_POSE_STANDING=2
uint8 HUMAN_POSE_SITTING=3

uint8 human_pose

# enums for human_reach_out_result
uint8 HUMAN_REACHED_OUT=1
uint8 HUMAN_DID_NOT_REACH_OUT=2

uint8 human_reach_out_result

# enums for grasp result
uint8 GRASP_SUCCESSFUL=1
uint8 GRASP_UNSUCCESSFUL=2

uint8 grasp_result


# enums for post_grasp_result
uint8 OBJECT_DROPPED_AFTER_GRASP=1
uint8 OBJECT_NOT_DROPPED_AFTER_GRASP=2

uint8 post_grasp_result


## Result
uint8 RESULT_SUCCESS=1
uint8 RESULT_FAILURE=2
uint8 result

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: metrics_refbox_msgs/BoundingBox2D
uint32 min_x
uint32 min_y
uint32 max_x
uint32 max_y
"""
  # Pseudo-constants
  FEEDBACK = 1
  RESULT = 2
  PHASE_NAV_TO_OBJECT = 1
  PHASE_OBJECT_DETECTION = 2
  PHASE_OBJECT_PICK = 3
  PHASE_NAV_TO_PERSON = 4
  PHASE_PERSON_DETECTION = 5
  PHASE_HANDOVER = 6
  HUMAN_POSE_LAYING = 1
  HUMAN_POSE_STANDING = 2
  HUMAN_POSE_SITTING = 3
  HUMAN_REACHED_OUT = 1
  HUMAN_DID_NOT_REACH_OUT = 2
  GRASP_SUCCESSFUL = 1
  GRASP_UNSUCCESSFUL = 2
  OBJECT_DROPPED_AFTER_GRASP = 1
  OBJECT_NOT_DROPPED_AFTER_GRASP = 2
  RESULT_SUCCESS = 1
  RESULT_FAILURE = 2

  __slots__ = ['message_type','phase','image','box2d','human_pose','human_reach_out_result','grasp_result','post_grasp_result','result']
  _slot_types = ['uint8','uint8','sensor_msgs/Image','metrics_refbox_msgs/BoundingBox2D','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       message_type,phase,image,box2d,human_pose,human_reach_out_result,grasp_result,post_grasp_result,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ItemDeliveryResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.message_type is None:
        self.message_type = 0
      if self.phase is None:
        self.phase = 0
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.box2d is None:
        self.box2d = metrics_refbox_msgs.msg.BoundingBox2D()
      if self.human_pose is None:
        self.human_pose = 0
      if self.human_reach_out_result is None:
        self.human_reach_out_result = 0
      if self.grasp_result is None:
        self.grasp_result = 0
      if self.post_grasp_result is None:
        self.post_grasp_result = 0
      if self.result is None:
        self.result = 0
    else:
      self.message_type = 0
      self.phase = 0
      self.image = sensor_msgs.msg.Image()
      self.box2d = metrics_refbox_msgs.msg.BoundingBox2D()
      self.human_pose = 0
      self.human_reach_out_result = 0
      self.grasp_result = 0
      self.post_grasp_result = 0
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.message_type, _x.phase, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I5B().pack(_x.box2d.min_x, _x.box2d.min_y, _x.box2d.max_x, _x.box2d.max_y, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.box2d is None:
        self.box2d = metrics_refbox_msgs.msg.BoundingBox2D()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.message_type, _x.phase, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.box2d.min_x, _x.box2d.min_y, _x.box2d.max_x, _x.box2d.max_y, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result, _x.result,) = _get_struct_4I5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.message_type, _x.phase, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I5B().pack(_x.box2d.min_x, _x.box2d.min_y, _x.box2d.max_x, _x.box2d.max_y, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.box2d is None:
        self.box2d = metrics_refbox_msgs.msg.BoundingBox2D()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.message_type, _x.phase, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.box2d.min_x, _x.box2d.min_y, _x.box2d.max_x, _x.box2d.max_y, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result, _x.result,) = _get_struct_4I5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3I = None
def _get_struct_2B3I():
    global _struct_2B3I
    if _struct_2B3I is None:
        _struct_2B3I = struct.Struct("<2B3I")
    return _struct_2B3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_4I5B = None
def _get_struct_4I5B():
    global _struct_4I5B
    if _struct_4I5B is None:
        _struct_4I5B = struct.Struct("<4I5B")
    return _struct_4I5B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
