# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from metrics_refbox_msgs/Command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Command(genpy.Message):
  _md5sum = "2f0442d04a8cefd06266d146bdcdb55f"
  _type = "metrics_refbox_msgs/Command"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# task ENUMS
uint8 OBJECT_DETECTION=1
uint8 PERSON_DETECTION=2
uint8 ACTIVITY_RECOGNITION=3
uint8 GESTURE_RECOGNITION=4
uint8 TASK_ORIENTED_GRASPING=5
uint8 HANDOVER_OBJECT=6
uint8 RECEIVE_OBJECT=7
uint8 ASSESS_ACTIVITY_STATE=8
uint8 ITEM_DELIVERY=9


# command ENUMS
uint8 START=1
uint8 STOP=2


uint8 task
uint8 command

# json string with additional info for specific benchmarks
string task_config

# unique identifier for this message
string uid
"""
  # Pseudo-constants
  OBJECT_DETECTION = 1
  PERSON_DETECTION = 2
  ACTIVITY_RECOGNITION = 3
  GESTURE_RECOGNITION = 4
  TASK_ORIENTED_GRASPING = 5
  HANDOVER_OBJECT = 6
  RECEIVE_OBJECT = 7
  ASSESS_ACTIVITY_STATE = 8
  ITEM_DELIVERY = 9
  START = 1
  STOP = 2

  __slots__ = ['task','command','task_config','uid']
  _slot_types = ['uint8','uint8','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task,command,task_config,uid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = 0
      if self.command is None:
        self.command = 0
      if self.task_config is None:
        self.task_config = ''
      if self.uid is None:
        self.uid = ''
    else:
      self.task = 0
      self.command = 0
      self.task_config = ''
      self.uid = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.task, _x.command))
      _x = self.task_config
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.task, _x.command,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_config = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_config = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uid = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.task, _x.command))
      _x = self.task_config
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.task, _x.command,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_config = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_config = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uid = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
