# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from metrics_refbox_msgs/HandoverObjectResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HandoverObjectResult(genpy.Message):
  _md5sum = "3d548e8447af165afb4ca080bc119755"
  _type = "metrics_refbox_msgs/HandoverObjectResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 FEEDBACK=1
uint8 RESULT=2
uint8 message_type

# enums for human_pose
uint8 HUMAN_POSE_LAYING=1
uint8 HUMAN_POSE_STANDING=2
uint8 HUMAN_POSE_SITTING=3


uint8 human_pose

# enums for human_reach_out_result
uint8 HUMAN_REACHED_OUT=1
uint8 HUMAN_DID_NOT_REACH_OUT=2

uint8 human_reach_out_result

# enums for grasp result
uint8 GRASP_SUCCESSFUL=1
uint8 GRASP_UNSUCCESSFUL=2

uint8 grasp_result


# enums for post_grasp_result
uint8 OBJECT_DROPPED_AFTER_GRASP=1
uint8 OBJECT_NOT_DROPPED_AFTER_GRASP=2

uint8 post_grasp_result
"""
  # Pseudo-constants
  FEEDBACK = 1
  RESULT = 2
  HUMAN_POSE_LAYING = 1
  HUMAN_POSE_STANDING = 2
  HUMAN_POSE_SITTING = 3
  HUMAN_REACHED_OUT = 1
  HUMAN_DID_NOT_REACH_OUT = 2
  GRASP_SUCCESSFUL = 1
  GRASP_UNSUCCESSFUL = 2
  OBJECT_DROPPED_AFTER_GRASP = 1
  OBJECT_NOT_DROPPED_AFTER_GRASP = 2

  __slots__ = ['message_type','human_pose','human_reach_out_result','grasp_result','post_grasp_result']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       message_type,human_pose,human_reach_out_result,grasp_result,post_grasp_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandoverObjectResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.message_type is None:
        self.message_type = 0
      if self.human_pose is None:
        self.human_pose = 0
      if self.human_reach_out_result is None:
        self.human_reach_out_result = 0
      if self.grasp_result is None:
        self.grasp_result = 0
      if self.post_grasp_result is None:
        self.post_grasp_result = 0
    else:
      self.message_type = 0
      self.human_pose = 0
      self.human_reach_out_result = 0
      self.grasp_result = 0
      self.post_grasp_result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.message_type, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.message_type, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.message_type, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.message_type, _x.human_pose, _x.human_reach_out_result, _x.grasp_result, _x.post_grasp_result,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
